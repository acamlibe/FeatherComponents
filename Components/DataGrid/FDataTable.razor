@namespace FC.Components

@typeparam TData
@attribute [CascadingTypeParameter(nameof(TData))]

<CascadingValue Value="this" IsFixed="true">
    @RenderTable()
</CascadingValue>

@code {
    [Parameter]
    public IEnumerable<TData>? Data { get;set; }

    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    public List<FColumn<TData>> Columns { get; set; } = new();

    private readonly Type _type = typeof(TData);

    private RenderFragment RenderTable() => builder =>
    {
        builder.OpenElement(0, "table");
        builder.OpenElement(1, "thead");
        
        builder.OpenElement(2, "tr");
        foreach (var column in Columns)
        {
            builder.OpenElement(3, "th");
            builder.AddAttribute(4, "scope", "col");
            builder.AddContent(5, column.Title);
            builder.CloseElement();
        }
        builder.CloseElement();

        if (Data is not null)
        {
            foreach (TData item in Data)
            {
                if (item == null)
                    continue;
                
                builder.OpenElement(6, "tr");
                foreach (var column in Columns)
                {
                    System.Reflection.PropertyInfo? prop = _type.GetProperty(column.Property);
                    object? value = prop?.GetValue(item, null);
                    
                    builder.OpenElement(7, "td");
                    builder.AddContent(8, value);
                    builder.CloseElement();
                }
                builder.CloseElement();
            }
        }
        
        builder.CloseElement();
        builder.CloseElement();
    };

    public void AddColumn(FColumn<TData> column)
    {
        Columns.Add(column);
    }

    public void RemoveColumn(FColumn<TData> column)
    {
        Columns.Remove(column);
    }
}
